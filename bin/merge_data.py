#!/usr/bin/env python3
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(style="white")
import sys
import gzip
import toml
from argparse import ArgumentParser
from ete3 import NCBITaxa
ncbi = NCBITaxa()


def channels():
    channels={}
    #Condition0 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256]
    #Condition1 = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512]

    Condition0 = [ 121, 113, 105, 97, 185, 177, 169, 161, 249, 241, 233, 225, 313, 305, 297, 289, 122, 114, 106, 98, 186, 178, 170, 162, 250, 242, 234, 226, 314, 306, 298, 290, 123, 115, 107, 99, 187, 179, 171, 163, 251, 243, 235, 227, 315, 307, 299, 291, 124, 116, 108, 100, 188, 180, 172, 164, 252, 244, 236, 228, 316, 308, 300, 292, 125, 117, 109, 101, 189, 181, 173, 165, 253, 245, 237, 229, 317, 309, 301, 293, 126, 118, 110, 102, 190, 182, 174, 166, 254, 246, 238, 230, 318, 310, 302, 294, 127, 119, 111, 103, 191, 183, 175, 167, 255, 247, 239, 231, 319, 311, 303, 295, 128, 120, 112, 104, 192, 184, 176, 168, 256, 248, 240, 232, 320, 312, 304, 296, 96, 88, 80, 72, 160, 152, 144, 136, 224, 216, 208, 200, 288, 280, 272, 264, 95, 87, 79, 71, 159, 151, 143, 135, 223, 215, 207, 199, 287, 279, 271, 263, 94, 86, 78, 70, 158, 150, 142, 134, 222, 214, 206, 198, 286, 278, 270, 262, 93, 85, 77, 69, 157, 149, 141, 133, 221, 213, 205, 197, 285, 277, 269, 261, 92, 84, 76, 68, 156, 148, 140, 132, 220, 212, 204, 196, 284, 276, 268, 260, 91, 83, 75, 67, 155, 147, 139, 131, 219, 211, 203, 195, 283, 275, 267, 259, 90, 82, 74, 66, 154, 146, 138, 130, 218, 210, 202, 194, 282, 274, 266, 258, 89, 81, 73, 65, 153, 145, 137, 129, 217, 209, 201, 193, 281, 273, 265, 257]
    Condition1 = [ 377, 369, 361, 353, 441, 433, 425, 417, 505, 497, 489, 481, 57, 49, 41, 33, 378, 370, 362, 354, 442, 434, 426, 418, 506, 498, 490, 482, 58, 50, 42, 34, 379, 371, 363, 355, 443, 435, 427, 419, 507, 499, 491, 483, 59, 51, 43, 35, 380, 372, 364, 356, 444, 436, 428, 420, 508, 500, 492, 484, 60, 52, 44, 36, 381, 373, 365, 357, 445, 437, 429, 421, 509, 501, 493, 485, 61, 53, 45, 37, 382, 374, 366, 358, 446, 438, 430, 422, 510, 502, 494, 486, 62, 54, 46, 38, 383, 375, 367, 359, 447, 439, 431, 423, 511, 503, 495, 487, 63, 55, 47, 39, 384, 376, 368, 360, 448, 440, 432, 424, 512, 504, 496, 488, 64, 56, 48, 40, 352, 344, 336, 328, 416, 408, 400, 392, 480, 472, 464, 456, 32, 24, 16, 8, 351, 343, 335, 327, 415, 407, 399, 391, 479, 471, 463, 455, 31, 23, 15, 7, 350, 342, 334, 326, 414, 406, 398, 390, 478, 470, 462, 454, 30, 22, 14, 6, 349, 341, 333, 325, 413, 405, 397, 389, 477, 469, 461, 453, 29, 21, 13, 5, 348, 340, 332, 324, 412, 404, 396, 388, 476, 468, 460, 452, 28, 20, 12, 4, 347, 339, 331, 323, 411, 403, 395, 387, 475, 467, 459, 451, 27, 19, 11, 3, 346, 338, 330, 322, 410, 402, 394, 386, 474, 466, 458, 450, 26, 18, 10, 2, 345, 337, 329, 321, 409, 401, 393, 385, 473, 465, 457, 449, 25, 17, 9, 1]

    layoutlist = []
    for i, j in zip(
                    [33, 481, 417, 353, 289, 225, 161, 97],
                            [8, 456, 392, 328, 264, 200, 136, 72]):
        for n in range(4):
            layoutlist.append(list(range(i + n * 8, (i + n * 8) + 8, 1)) +
                        list(range(j + n * 8, (j + n * 8) - 8, -1)))
    layout = np.array(layoutlist).transpose()
    Condition1=layout[:,0:16].flatten()
    Condition0=layout[:,16:].flatten()

    for ch in Condition0:
        channels[ch]='Condtion0'
    for ch in Condition1:
        channels[ch]='Condtion1'
    return channels

def channelsToml(tomlFILE):
    toml_d = toml.load(tomlFILE)
    channels={}
    for condition in toml_d['conditions']:
        for channel in toml_d['conditions'][condition]['channels']:
            channels[channel]=toml_d['conditions'][condition]['name']
        #channels[toml_d['conditions'][condition]['name']]=toml_d['conditions'][condition]['channels']
    
    return channels

def loadSeqSum(txt):
    df=pd.read_csv(txt,sep='\t')   
    df['time']=pd.to_datetime(df['start_time'])
    start_time=df['time'].min()
    df['run time']=df['time']-start_time
    df['minutes']=df['run time']/60
    df['hours']=df['minutes']/60
    return df

def loadCent(cent):
	df=pd.read_csv(gzip.open(cent,'rt'),sep='\t')
	return df

def loadKraken(kraken):
    df=pd.read_csv(kraken,sep='\t', names=['c/u','readID','taxID','score','kmers'])
    return df

def run(opts):
    df=loadSeqSum(opts.seqsum)
    #df2=loadCent(opts.centrifuge)
    df2=loadKraken(opts.kraken2_raw)

    df=df.merge(df2,left_on='read_id', right_on='readID', how='left')
    #chs=channels()
    #print(chs)
    df.dropna(subset=['taxID'],inplace=True)
    chs=channelsToml(opts.toml)
    df['Channel']=df['channel'].map(int)
    df['Condition']=df['Channel'].map(chs)
    df.to_csv(opts.output,index=False,sep='\t')

def args(parser):
    parser.add_argument('-c', '--centrifuge', required=False,
                             help='centrifuge file')
    parser.add_argument('-k', '--kraken2_raw', required=False,
                             help='centrifuge file')
    parser.add_argument('-s', '--seqsum', required=True,
                             help='seq sum file')
    parser.add_argument('-t', '--toml', required=True,
                             help='chanels toml file')
    parser.add_argument('-o', '--output', required=True,
                            help='output tsv file')
    return parser

if __name__=="__main__":
    # args
    parser = ArgumentParser(description='Conditions, classifications and times from centrifuge and seqsums')
    parser = args(parser)
    opts, unknown_args = parser.parse_known_args()
    # run script

    run(opts)
